@page "/users/delete"

@using Microsoft.EntityFrameworkCore
@using BugZila.Models
@inject IDbContextFactory<BugZila.Data.ApplicationDbContext> DbFactory
@inject NavigationManager Navigation
@inject SessionService SessionService
@rendermode InteractiveServer

@inject Blazored.LocalStorage.ILocalStorageService LocalStorage;
@if(hello == -1)
{
    <h1>Loading ..... </h1>
}
else
{
    
<PageTitle>Delete</PageTitle>

<h1>Delete User</h1>

<p>Are you sure you want to delete this?</p>
<div>
    
    <hr />
    @if (users is null)
    {
        <p><em>Loading...</em></p>
    }
    else {
        <dl class="row">
            <dt class="col-sm-2">Name</dt>
            <dd class="col-sm-10">@users.Name</dd>
        </dl>
        <dl class="row">
            <dt class="col-sm-2">Email</dt>
            <dd class="col-sm-10">@users.Email</dd>
        </dl>
        <dl class="row">
            <dt class="col-sm-2">Password</dt>
            <dd class="col-sm-10">@users.Password</dd>
        </dl>
        <dl class="row">
            <dt class="col-sm-2">UserType</dt>
            <dd class="col-sm-10">@users.UserType</dd>
        </dl>
        <EditForm method="post" Model="users" OnValidSubmit="DeleteUsers" FormName="delete" Enhance>
            <button type="submit" class="btn btn-danger" disabled="@(users is null)">Delete</button>
                <button type="button" class="btn btn-secondary ms-2" @onclick="GoBack">
                    Back to List
                </button>
        </EditForm>
    }
    </div>
    }
@code {
    int hello = -1;



    private Users? users;

    [SupplyParameterFromQuery]
    private int UserID { get; set; }

    protected override async Task OnInitializedAsync()
    {
        GetId();

        using var context = DbFactory.CreateDbContext();
        users = await context.Users.FirstOrDefaultAsync(m => m.UserID == UserID);

        if (users is null)
        {
            Navigation.NavigateTo("notfound");
        }
    }
    private async Task GetId()
    {
        hello = await LocalStorage.GetItemAsync<int>("Value");
        if (hello != 1 && hello != -1)
        {
            Navigation.NavigateTo("/Sessionfail");
        }
        StateHasChanged();
    }

    private async Task DeleteUsers()
    {
        using var context = DbFactory.CreateDbContext();
        var userToDelete = users;

        if (userToDelete is null)
            return;

        // If the user is a Developer (UserType == 0)
        if (userToDelete.UserType == 0)
        {
            // Set DeveloperID = null for all bugs where this user is assigned as developer
            var bugsAssigned = context.Bugs.Where(b => b.DeveloperID == userToDelete.UserID);
            await bugsAssigned.ForEachAsync(b => b.DeveloperID = null);
            await context.SaveChangesAsync();
        }
        context.Users.Attach(users);
        context.Users.Remove(users!);
        await context.SaveChangesAsync();
        if (hello == 0)
        {
            Navigation.NavigateTo("/developer");
        }
        else if (hello == 1)
        {
            Navigation.NavigateTo("/admin");
        }
        else if (hello == 2)
        {
            Navigation.NavigateTo("/qa");
        }
    }
    private void GoBack()
    {
        if (hello == 0)
        {
            Navigation.NavigateTo("/developer");
        }
        else if (hello == 1)
        {
            Navigation.NavigateTo("/admin");
        }
        else if (hello == 2)
        {
            Navigation.NavigateTo("/qa");
        }

    }
}
