@page "/users/edit"
@using Microsoft.EntityFrameworkCore
@using BugZila.Models
@inject IDbContextFactory<BugZila.Data.ApplicationDbContext> DbFactory
@inject NavigationManager NavigationManager
@inject SessionService SessionService
@rendermode InteractiveServer

@inject Blazored.LocalStorage.ILocalStorageService LocalStorage;

@if (hello == -1)
{
    <h1>Loading ..... </h1>
}
else
{
<PageTitle>Edit</PageTitle>


<hr />
@if (Users is null)
{
    <p><em>Loading...</em></p>
}
else
{
   <PageTitle>Edit User</PageTitle>

<h2 class="mt-4 text-primary">Edit User</h2>
<hr />

<div class="container">
    <div class="row justify-content-center">
        <div class="col-md-6">
            <EditForm method="post" Model="Users" OnValidSubmit="UpdateUsers" FormName="edit" Enhance>
                <DataAnnotationsValidator />
                <ValidationSummary role="alert" class="text-danger" />

                <InputHidden name="Users.UserID" value="@Users.UserID" />

                <div class="row g-3">
                    <div class="col-12">
                        <label for="name" class="form-label">Name</label>
                        <InputText id="name" class="form-control" @bind-Value="Users.Name" />
                        <ValidationMessage For="() => Users.Name" class="text-danger" />
                    </div>

                    <div class="col-12">
                        <label for="email" class="form-label">Email</label>
                        <InputText id="email" class="form-control" @bind-Value="Users.Email" />
                        <ValidationMessage For="() => Users.Email" class="text-danger" />
                    </div>

                    <div class="col-12">
                        <label for="password" class="form-label">Password</label>
                        <InputText id="password" class="form-control" @bind-Value="Users.Password" />
                        <ValidationMessage For="() => Users.Password" class="text-danger" />
                    </div>

                    <div class="col-12">
                        <label for="usertype" class="form-label">User Type</label>
                        <InputSelect id="usertype" class="form-control" @bind-Value="Users.UserType">
                            @foreach (var userType in Enum.GetValues(typeof(UserType)).Cast<UserType>())
                            {
                                <option value="@(Convert.ToInt32(userType))">@userType</option>
                            }
                        </InputSelect>
                        <ValidationMessage For="() => Users.UserType" class="text-danger" />
                    </div>
                </div>

                <div class="mt-4 d-flex justify-content-start gap-2">
                    <button type="submit" class="btn btn-success px-4">Save</button>
                    <button type="button" class="btn btn-secondary px-4" @onclick="GoBack">Back to List</button>
                </div>
            </EditForm>
        </div>
    </div>
</div>

    }

}


@code {
    int hello = -1;

    
   
    [SupplyParameterFromQuery]
    private int UserID { get; set; }

    [SupplyParameterFromForm]
    private Users? Users { get; set; }

    protected override async Task OnInitializedAsync()
    {
        GetId();
        using var context = DbFactory.CreateDbContext();
        Users ??= await context.Users.FirstOrDefaultAsync(m => m.UserID == UserID);

        if (Users is null)
        {
            NavigationManager.NavigateTo("/notfound");
        }
    }
    private async Task GetId()
    {
        hello = await LocalStorage.GetItemAsync<int>("Value");
        if (hello != 1 && hello != -1)
        {
            NavigationManager.NavigateTo("/Sessionfail");
        }
        StateHasChanged();
    }

    // To protect from overposting attacks, enable the specific properties you want to bind to.
    // For more information, see https://learn.microsoft.com/aspnet/core/blazor/forms/#mitigate-overposting-attacks.
    private async Task UpdateUsers()
    {
        using var context = DbFactory.CreateDbContext();

        var existingUser = await context.Users.AsNoTracking().FirstOrDefaultAsync(u => u.UserID == Users!.UserID);

        if (existingUser is null)
        {
            NavigationManager.NavigateTo("/notfound");
            return;
        }

        if (!string.IsNullOrWhiteSpace(Users.Password))
        {
            var hasher = new PasswordHasher<Users>();
            Users.PasswordHash = hasher.HashPassword(Users, Users.Password);
        }
        else
        {
            // Keep the old hash if no new password is provided
            Users.PasswordHash = existingUser.PasswordHash;
        }

        // Preserve other unchanged fields if needed (like registration date, etc.)
        // context.Entry(Users).State = EntityState.Modified;  ← this can overwrite everything
        context.Users.Update(Users);

        try
        {
            await context.SaveChangesAsync();
        }
        catch (DbUpdateConcurrencyException)
        {
            if (!UsersExists(Users.UserID))
            {
                NavigationManager.NavigateTo("/notfound");
            }
            else
            {
                throw;
            }
        }

        // Redirect
        if (hello == 0)
            NavigationManager.NavigateTo("/developer");
        else if (hello == 1)
            NavigationManager.NavigateTo("/admin");
        else if (hello == 2)
            NavigationManager.NavigateTo("/qa");
    }


    private bool UsersExists(int userid)
    {
        using var context = DbFactory.CreateDbContext();
        return context.Users.Any(e => e.UserID == userid);
    }
    private void GoBack()
    {
        if (hello == 0)
        {
            NavigationManager.NavigateTo("/developer");
        }
        else if (hello == 1)
        {
            NavigationManager.NavigateTo("/admin");
        }
        else if (hello == 2)
        {
            NavigationManager.NavigateTo("/qa");
        }

    }
}
