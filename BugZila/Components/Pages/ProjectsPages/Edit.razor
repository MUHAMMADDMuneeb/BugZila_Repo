@page "/projects/edit"
@using Microsoft.EntityFrameworkCore
@using BugZila.Models
@inject IDbContextFactory<BugZila.Data.ApplicationDbContext> DbFactory
@inject NavigationManager NavigationManager
@inject SessionService SessionService
@inject Blazored.LocalStorage.ILocalStorageService LocalStorage;
@rendermode InteractiveServer

@if(hello == -1)
{
    <h1>Loading ..... </h1>
}
else
{

    <PageTitle>Edit</PageTitle>

    
    <hr />
    @if (Projects is null)
    {
        <p><em>Loading...</em></p>
    }
    else
    {
        <PageTitle>Edit Project</PageTitle>

<h2 class="mt-4 text-primary">Edit Project</h2>
<hr />

<div class="container">
    <div class="row justify-content-center">
        <div class="col-md-6">
            <EditForm method="post" Model="Projects" OnValidSubmit="UpdateProjects" FormName="edit" Enhance>
                <DataAnnotationsValidator />
                <ValidationSummary role="alert" class="text-danger" />

                <InputHidden name="Projects.ProjectID" value="@Projects.ProjectID" />

                <div class="row g-3">
                    <div class="col-12">
                        <label for="name" class="form-label">Name</label>
                        <InputText id="name" class="form-control" @bind-Value="Projects.Name" />
                        <ValidationMessage For="() => Projects.Name" class="text-danger" />
                    </div>

                    <div class="col-12">
                        <label for="description" class="form-label">Description</label>
                        <InputText id="description" class="form-control" @bind-Value="Projects.Description" />
                        <ValidationMessage For="() => Projects.Description" class="text-danger" />
                    </div>

                    <div class="col-12">
                        <label for="deadline" class="form-label">Deadline</label>
                        <InputDate id="deadline" class="form-control" @bind-Value="Projects.Deadline" />
                        <ValidationMessage For="() => Projects.Deadline" class="text-danger" />
                    </div>

                   
                </div>

                <div class="mt-4 d-flex justify-content-start gap-2">
                    <button type="submit" class="btn btn-success px-4">Save</button>
                    <button type="button" class="btn btn-secondary px-4" @onclick="GoBack">Back to List</button>
                </div>
            </EditForm>
        </div>
    </div>
</div>

    }

   
    }
@code {
    int hello = -1;

   
    [SupplyParameterFromQuery]
    private int ProjectID { get; set; }

    [SupplyParameterFromForm]
    private Projects? Projects { get; set; }

    protected override async Task OnInitializedAsync()
    {
        GetId();
        using var context = DbFactory.CreateDbContext();
        Projects ??= await context.Projects.FirstOrDefaultAsync(m => m.ProjectID == ProjectID);

        if (Projects is null)
        {
            NavigationManager.NavigateTo("notfound");
        }
    }
    private async Task GetId()
    {
        hello = await LocalStorage.GetItemAsync<int>("Value");
        if (hello != 1 && hello != -1)
        {
            NavigationManager.NavigateTo("/sessionfail");
        }
        StateHasChanged();
    }

    // To protect from overposting attacks, enable the specific properties you want to bind to.
    // For more information, see https://learn.microsoft.com/aspnet/core/blazor/forms/#mitigate-overposting-attacks.
    private async Task UpdateProjects()
    {
        using var context = DbFactory.CreateDbContext();
        context.Attach(Projects!).State = EntityState.Modified;

        try
        {
            await context.SaveChangesAsync();
        }
        catch (DbUpdateConcurrencyException)
        {
            if (!ProjectsExists(Projects!.ProjectID))
            {
                NavigationManager.NavigateTo("notfound");
            }
            else
            {
                throw;
            }
        }

        if (hello == 0)
        {
            NavigationManager.NavigateTo("/developer");
        }
        else if (hello == 1)
        {
            NavigationManager.NavigateTo("/admin");
        }
        else if (hello == 2)
        {
            NavigationManager.NavigateTo("/qa");
        }
    }

    private bool ProjectsExists(int projectid)
    {
        using var context = DbFactory.CreateDbContext();
        return context.Projects.Any(e => e.ProjectID == projectid);
    }
    private void GoBack()
    {
        if (hello == 0)
        {
            NavigationManager.NavigateTo("/developer");
        }
        else if (hello == 1)
        {
            NavigationManager.NavigateTo("/admin");
        }
        else if (hello == 2)
        {
            NavigationManager.NavigateTo("/qa");
        }

    }
}
